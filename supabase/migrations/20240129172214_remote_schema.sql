create table "public"."hacks" (
    "id" bigint generated by default as identity not null,
    "game_id" bigint,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "short_description" text not null default ''::text,
    "markdown_description" text not null default ''::text,
    "creator" uuid default auth.uid(),
    "slug" text not null,
    "public" boolean default false
);


alter table "public"."hacks" enable row level security;

CREATE UNIQUE INDEX hacks_pkey ON public.hacks USING btree (id);

CREATE UNIQUE INDEX hacks_slug_idx ON public.hacks USING btree (slug);

alter table "public"."hacks" add constraint "hacks_pkey" PRIMARY KEY using index "hacks_pkey";

alter table "public"."hacks" add constraint "hacks_creator_fkey" FOREIGN KEY (creator) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hacks" validate constraint "hacks_creator_fkey";

alter table "public"."hacks" add constraint "hacks_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."hacks" validate constraint "hacks_game_id_fkey";

grant delete on table "public"."hacks" to "anon";

grant insert on table "public"."hacks" to "anon";

grant references on table "public"."hacks" to "anon";

grant select on table "public"."hacks" to "anon";

grant trigger on table "public"."hacks" to "anon";

grant truncate on table "public"."hacks" to "anon";

grant update on table "public"."hacks" to "anon";

grant delete on table "public"."hacks" to "authenticated";

grant insert on table "public"."hacks" to "authenticated";

grant references on table "public"."hacks" to "authenticated";

grant select on table "public"."hacks" to "authenticated";

grant trigger on table "public"."hacks" to "authenticated";

grant truncate on table "public"."hacks" to "authenticated";

grant update on table "public"."hacks" to "authenticated";

grant delete on table "public"."hacks" to "service_role";

grant insert on table "public"."hacks" to "service_role";

grant references on table "public"."hacks" to "service_role";

grant select on table "public"."hacks" to "service_role";

grant trigger on table "public"."hacks" to "service_role";

grant truncate on table "public"."hacks" to "service_role";

grant update on table "public"."hacks" to "service_role";

create policy "Enable insert for authenticated users only"
on "public"."hacks"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for public hacks"
on "public"."hacks"
as permissive
for select
to public
using ((public = true));


create policy "Users can do anything with hacks they created"
on "public"."hacks"
as permissive
for all
to authenticated
using ((auth.uid() = creator));



